#!/bin/bash

# Script para testar o sistema de gerenciamento de usu√°rios

echo "üß™ Testando Sistema de Gerenciamento de Usu√°rios"
echo "=" $(printf "%0.s=" {1..50})

# Verificar se o painel est√° rodando
echo "1. Verificando se o painel web est√° rodando..."
if ! curl -s http://localhost:4000 > /dev/null; then
    echo "‚ùå Painel web n√£o est√° acess√≠vel"
    echo "üí° Inicie com: npm run web:start"
    exit 1
fi

echo "‚úÖ Painel web est√° acess√≠vel"

# Fazer login como admin
echo ""
echo "2. Fazendo login como administrador..."
LOGIN_RESPONSE=$(curl -s -X POST http://localhost:4000/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{"username":"admin","password":"admin123"}')

if echo "$LOGIN_RESPONSE" | grep -q "token"; then
    echo "‚úÖ Login realizado com sucesso"
    
    # Extrair token
    TOKEN=$(echo "$LOGIN_RESPONSE" | grep -o '"token":"[^"]*"' | cut -d'"' -f4)
    
    if [ ! -z "$TOKEN" ]; then
        echo "‚úÖ Token obtido: ${TOKEN:0:20}..."
        
        # Testar listagem de usu√°rios
        echo ""
        echo "3. Testando listagem de usu√°rios..."
        USERS_RESPONSE=$(curl -s http://localhost:4000/api/auth/users \
          -H "Authorization: Bearer $TOKEN")
        
        if echo "$USERS_RESPONSE" | grep -q "success"; then
            echo "‚úÖ Listagem de usu√°rios funcionando"
            USER_COUNT=$(echo "$USERS_RESPONSE" | grep -o '"username"' | wc -l)
            echo "üìä Usu√°rios encontrados: $USER_COUNT"
        else
            echo "‚ùå Erro na listagem de usu√°rios"
            echo "üìä Resposta: $USERS_RESPONSE"
        fi
        
        # Testar registro de novo usu√°rio
        echo ""
        echo "4. Testando registro de novo usu√°rio..."
        REGISTER_RESPONSE=$(curl -s -X POST http://localhost:4000/api/auth/register \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $TOKEN" \
          -d '{
            "username": "teste_user",
            "email": "teste@voetur.com.br",
            "password": "senha123",
            "role": "user"
          }')
        
        if echo "$REGISTER_RESPONSE" | grep -q "success.*true"; then
            echo "‚úÖ Registro de usu√°rio funcionando"
            NEW_USER_ID=$(echo "$REGISTER_RESPONSE" | grep -o '"id":[0-9]*' | cut -d':' -f2)
            echo "üìä Novo usu√°rio ID: $NEW_USER_ID"
            
            # Testar atualiza√ß√£o do usu√°rio
            echo ""
            echo "5. Testando atualiza√ß√£o de usu√°rio..."
            UPDATE_RESPONSE=$(curl -s -X PUT http://localhost:4000/api/auth/users/$NEW_USER_ID \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $TOKEN" \
              -d '{
                "username": "teste_user_updated",
                "email": "teste_updated@voetur.com.br",
                "role": "viewer",
                "is_active": true
              }')
            
            if echo "$UPDATE_RESPONSE" | grep -q "success.*true"; then
                echo "‚úÖ Atualiza√ß√£o de usu√°rio funcionando"
            else
                echo "‚ùå Erro na atualiza√ß√£o de usu√°rio"
                echo "üìä Resposta: $UPDATE_RESPONSE"
            fi
            
            # Testar dele√ß√£o do usu√°rio
            echo ""
            echo "6. Testando dele√ß√£o de usu√°rio..."
            DELETE_RESPONSE=$(curl -s -X DELETE http://localhost:4000/api/auth/users/$NEW_USER_ID \
              -H "Authorization: Bearer $TOKEN")
            
            if echo "$DELETE_RESPONSE" | grep -q "success.*true"; then
                echo "‚úÖ Dele√ß√£o de usu√°rio funcionando"
            else
                echo "‚ùå Erro na dele√ß√£o de usu√°rio"
                echo "üìä Resposta: $DELETE_RESPONSE"
            fi
            
        else
            echo "‚ùå Erro no registro de usu√°rio"
            echo "üìä Resposta: $REGISTER_RESPONSE"
        fi
        
        # Testar acesso √† p√°gina de usu√°rios
        echo ""
        echo "7. Testando acesso √† p√°gina de usu√°rios..."
        if curl -s http://localhost:4000/users.html | grep -q "Gerenciar Usu√°rios"; then
            echo "‚úÖ P√°gina de usu√°rios acess√≠vel"
        else
            echo "‚ùå P√°gina de usu√°rios n√£o encontrada"
        fi
        
    else
        echo "‚ùå N√£o foi poss√≠vel extrair o token"
    fi
else
    echo "‚ùå Erro no login"
    echo "üìä Resposta: $LOGIN_RESPONSE"
fi

echo ""
echo "üéØ Resumo dos Testes:"
echo "‚Ä¢ Login de administrador"
echo "‚Ä¢ Listagem de usu√°rios"
echo "‚Ä¢ Registro de novo usu√°rio"
echo "‚Ä¢ Atualiza√ß√£o de usu√°rio"
echo "‚Ä¢ Dele√ß√£o de usu√°rio"
echo "‚Ä¢ Acesso √† interface web"

echo ""
echo "üåê Para testar manualmente:"
echo "1. Acesse: http://localhost:4000"
echo "2. Login: admin / admin123"
echo "3. Clique em 'Usu√°rios' no menu"
echo "4. Teste as funcionalidades:"
echo "   ‚Ä¢ Adicionar novo usu√°rio"
echo "   ‚Ä¢ Editar usu√°rio existente"
echo "   ‚Ä¢ Alterar status (ativo/inativo)"
echo "   ‚Ä¢ Deletar usu√°rio (exceto admin)"

echo ""
echo "üìã Funcionalidades implementadas:"
echo "‚Ä¢ ‚úÖ Registro de usu√°rios (apenas admins)"
echo "‚Ä¢ ‚úÖ Listagem de usu√°rios"
echo "‚Ä¢ ‚úÖ Edi√ß√£o de usu√°rios"
echo "‚Ä¢ ‚úÖ Ativa√ß√£o/desativa√ß√£o"
echo "‚Ä¢ ‚úÖ Dele√ß√£o de usu√°rios"
echo "‚Ä¢ ‚úÖ Controle de permiss√µes por role"
echo "‚Ä¢ ‚úÖ Logs de atividade"
echo "‚Ä¢ ‚úÖ Interface web responsiva"
echo "‚Ä¢ ‚úÖ Valida√ß√µes de seguran√ßa"

echo ""
echo "üîê Roles dispon√≠veis:"
echo "‚Ä¢ admin: Acesso total ao sistema"
echo "‚Ä¢ user: Acesso b√°sico ao painel"
echo "‚Ä¢ viewer: Apenas visualiza√ß√£o"
