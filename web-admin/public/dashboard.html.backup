<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" type="image/x-icon" href="/favicon.ico">
    <title>Dashboard - NextBot Solutions</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="/css/nextbot-theme.css">
    <meta name="theme-color" content="#FF6B00">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.2/socket.io.js"></script>
</head>
<body>
    <div class="header">
        <h1><i class="fas fa-robot logo-icon"></i> NextBot Solutions - Dashboard</h1>
        <div class="nav-links">
            <a href="/dashboard.html" class="active"><i class="fas fa-tachometer-alt"></i> Dashboard</a>
            <a href="/users.html" id="usersMenuLink" style="display: none;"><i class="fas fa-users"></i> Usuários</a>
            <a href="/terminal.html"><i class="fas fa-code"></i> Terminal</a>
            <a href="/settings.html"><i class="fas fa-cog"></i> Configurações</a>
        </div>
        <div class="user-info">
            <span id="userInfo">Carregando...</span>
            <button class="btn btn-danger" onclick="logout()">
                <i class="fas fa-sign-out-alt"></i> Sair
            </button>
        </div>
    </div>

    <div class="main-content">
        <div id="alert" class="alert hidden"></div>

        <div class="dashboard-grid">
            <!-- Status do Bot -->
            <div class="card status-card">
                <h3><i class="fas fa-heartbeat"></i> Status do Bot</h3>
                <div id="statusIndicator" class="status-indicator status-unknown">
                    <i class="fas fa-question"></i>
                </div>
                <div id="statusText">Verificando...</div>
                <div id="statusDetails" class="hidden">
                    <small id="statusInfo"></small>
                </div>
                <div class="control-buttons">
                    <button class="btn btn-success" id="startBtn" onclick="startBot()">
                        <i class="fas fa-play"></i> Iniciar
                    </button>
                    <button class="btn btn-primary" id="restartBtn" onclick="restartBot()">
                        <i class="fas fa-redo"></i> Reiniciar
                    </button>
                    <button class="btn btn-danger" id="stopBtn" onclick="stopBot()">
                        <i class="fas fa-stop"></i> Parar
                    </button>
                    <button class="btn btn-secondary" id="debugBtn" onclick="testAPI()">
                        <i class="fas fa-bug"></i> Debug API
                    </button>
                    <button class="btn btn-info" id="logsBtn" onclick="showLogs()">
                        <i class="fas fa-file-alt"></i> Logs
                </div>
            </div>

            <!-- Estatísticas -->
            <div class="card">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
                    <h3><i class="fas fa-chart-bar"></i> Estatísticas</h3>
                    <button class="btn btn-sm btn-danger" onclick="clearStats()" title="Limpar estatísticas">
                        <i class="fas fa-trash"></i> Limpar
                    </button>
                </div>
                <div class="stats-grid">
                    <div class="stat-item">
                        <div class="stat-number" id="activeBots" style="color: var(--primary-color);">-</div>
                        <div class="stat-label"><i class="fas fa-robot"></i> Bots Ativos</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number" id="totalSent">-</div>
                        <div class="stat-label">Mensagens Enviadas</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number" id="totalReceived">-</div>
                        <div class="stat-label">Mensagens Recebidas</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number" id="totalCommands">-</div>
                        <div class="stat-label">Comandos Executados</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number" id="totalCnpj">-</div>
                        <div class="stat-label">Consultas CNPJ</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number" id="totalFreshserviceTickets" style="color: var(--success-color);">-</div>
                        <div class="stat-label"><i class="fas fa-ticket-alt"></i> Chamados Freshservice</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number" id="totalMessages">-</div>
                        <div class="stat-label">Total Mensagens</div>
                    </div>
                </div>
            </div>

            <!-- Health Check -->
            <div class="card">
                <h3><i class="fas fa-stethoscope"></i> Health Check</h3>
                <div id="healthStatus">
                    <div class="loading">
                        <i class="fas fa-spinner"></i>
                        <p>Verificando saúde do sistema...</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Logs em Tempo Real -->
        <div class="card">
            <h3>
                <i class="fas fa-terminal"></i> Logs em Tempo Real
                <button class="btn btn-primary" id="refreshLogsBtn2" onclick="refreshLogs()" style="margin-left: auto;">
                    <i class="fas fa-refresh"></i> Atualizar
                </button>
            </h3>
            <div id="logsContainer" class="logs-container">
                <div class="loading">
                    <i class="fas fa-spinner"></i>
                    Carregando logs...
                </div>
            </div>
        </div>
    </div>


    <script>
        let socket;
        let authToken;
        let user;

        // Verificar autenticação
        async function checkAuth() {
            authToken = localStorage.getItem('authToken');
            if (!authToken) {
                console.log('Token não encontrado, redirecionando para login...');
                window.location.href = '/';
                return;
            }

            try {
                // Verificar se o token é válido fazendo uma chamada à API
                const response = await fetch('/api/auth/me', {
                    headers: { 'Authorization': `Bearer ${authToken}` }
                });

                if (!response.ok) {
                    console.log('Token inválido, redirecionando para login...');
                    localStorage.removeItem('authToken');
                    window.location.href = '/';
                    return;
                }

                const userData = await response.json();
                user = userData.user || userData;
                document.getElementById('userInfo').textContent = `Olá, ${user.username}`;

                // Mostrar menu de usuários apenas para admins
                if (user.role === 'admin') {
                    document.getElementById('usersMenuLink').style.display = 'inline-block';
                }
            } catch (e) {
                console.error('Erro na verificação de auth:', e);
                document.getElementById('userInfo').textContent = 'Usuário';
                // Em caso de erro, tentar continuar mesmo assim
            }

            // Conectar WebSocket
            connectWebSocket();

            // Carregar dados iniciais
            await loadDashboardData();

            // Atualizar dados a cada 30 segundos
            setInterval(loadDashboardData, 30000);
        }

        // Inicializar quando a página carregar
        document.addEventListener('DOMContentLoaded', function() {
            checkAuth();
        });

        // Conectar WebSocket para logs em tempo real
        function connectWebSocket() {
            socket = io({
                auth: {
                    token: authToken
                }
            });

            socket.on('connect', () => {
                console.log('WebSocket conectado');
                socket.emit('join-logs');
            });

            socket.on('new-log', (logData) => {
                addLogEntry(logData);
            });

            socket.on('disconnect', () => {
                console.log('WebSocket desconectado');
            });
        }

        // Carregar dados do dashboard
        async function loadDashboardData() {
            try {
                await Promise.all([
                    loadBotStatus(),
                    loadStats(),
                    loadActiveBots(),
                    loadHealthCheck(),
                    loadLogs(),
                    loadFreshserviceStats()
                ]);
            } catch (error) {
                console.error('Erro ao carregar dados:', error);
                showAlert('Erro ao carregar dados do dashboard', 'danger');
            }
        }
        
        // Carregar contagem de bots ativos
        async function loadActiveBots() {
            try {
                const response = await fetch('/api/bots', {
                    headers: { 'Authorization': `Bearer ${authToken}` }
                });
                
                if (response.ok) {
                    const bots = await response.json();
                    const activeBots = bots.filter(bot => bot.status === 'online').length;
                    const totalBots = bots.length;
                    
                    const element = document.getElementById('activeBots');
                    if (element) {
                        element.textContent = `${activeBots}/${totalBots}`;
                        element.title = `${activeBots} bots online de ${totalBots} total`;
                    }
                    
                    console.log(`✅ Bots ativos: ${activeBots}/${totalBots}`);
                } else {
                    document.getElementById('activeBots').textContent = '0/0';
                }
            } catch (error) {
                console.error('Erro ao carregar bots ativos:', error);
                document.getElementById('activeBots').textContent = 'N/A';
            }
        }

        // Carregar status do bot
        async function loadBotStatus() {
            try {
                console.log('🔍 Carregando status do bot...');
                const response = await fetch('/api/bot/status', {
                    headers: { 'Authorization': `Bearer ${authToken}` }
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}`);
                }
                
                const data = await response.json();
                console.log('📊 Status recebido:', data);

                const indicator = document.getElementById('statusIndicator');
                const text = document.getElementById('statusText');
                const details = document.getElementById('statusDetails');
                const info = document.getElementById('statusInfo');

                if (data.success) {
                    if (data.status === 'online') {
                        if (indicator) {
                            indicator.className = 'status-indicator status-online';
                            indicator.innerHTML = '<i class="fas fa-check"></i>';
                        }
                        if (text) text.textContent = 'Online';
                        
                        // Acessar dados de details corretamente
                        const pid = data.details?.pid || 'N/A';
                        const uptime = data.details?.uptime ? formatUptime(data.details.uptime) : 'N/A';
                        const restarts = data.details?.restarts || 0;
                        const memory = data.details?.memory ? formatMemory(data.details.memory) : 'N/A';
                        const cpu = data.details?.cpu ? data.details.cpu.toFixed(1) + '%' : 'N/A';
                        
                        if (info) {
                            info.innerHTML = `
                                <strong>PID:</strong> ${pid} | 
                                <strong>Uptime:</strong> ${uptime} | 
                                <strong>Restarts:</strong> ${restarts}<br>
                                <strong>CPU:</strong> ${cpu} | 
                                <strong>Memória:</strong> ${memory}
                            `;
                        }
                        if (details) details.classList.remove('hidden');
                        console.log('✅ Bot está online');
                    } else if (data.status === 'stopped') {
                        if (indicator) {
                            indicator.className = 'status-indicator status-offline';
                            indicator.innerHTML = '<i class="fas fa-times"></i>';
                        }
                        if (text) text.textContent = 'Parado';
                        if (details) details.classList.add('hidden');
                        console.log('⏸️ Bot está parado');
                    } else {
                        if (indicator) {
                            indicator.className = 'status-indicator status-unknown';
                            indicator.innerHTML = '<i class="fas fa-question"></i>';
                        }
                        if (text) text.textContent = data.status || 'Desconhecido';
                        if (details) details.classList.add('hidden');
                        console.log('❓ Status desconhecido:', data.status);
                    }
                } else {
                    if (indicator) {
                        indicator.className = 'status-indicator status-unknown';
                        indicator.innerHTML = '<i class="fas fa-exclamation"></i>';
                    }
                    if (text) text.textContent = 'Erro';
                    if (details) details.classList.add('hidden');
                    console.error('❌ Erro na resposta:', data.message);
                }
            } catch (error) {
                console.error('❌ Erro ao carregar status:', error);
                const indicator = document.getElementById('statusIndicator');
                const text = document.getElementById('statusText');
                const details = document.getElementById('statusDetails');
                
                if (indicator) {
                    indicator.className = 'status-indicator status-unknown';
                    indicator.innerHTML = '<i class="fas fa-exclamation-triangle"></i>';
                }
                if (text) text.textContent = 'Erro de Conexão';
                if (details) details.classList.add('hidden');
            }
        }

        // Carregar estatísticas com retry automático
        async function loadStats(retryCount = 0) {
            try {
                console.log('Carregando estatísticas...');
                const response = await fetch('/api/bot/stats', {
                    headers: { 'Authorization': `Bearer ${authToken}` }
                });
                
                console.log('Response status:', response.status);
                
                // Se for rate limiting (429), tentar novamente após delay
                if (response.status === 429) {
                    if (retryCount < 3) {
                        console.log(`⏳ Rate limit atingido, tentando novamente em ${(retryCount + 1) * 2} segundos...`);
                        setTimeout(() => loadStats(retryCount + 1), (retryCount + 1) * 2000);
                        return;
                    } else {
                        throw new Error('Rate limit: Muitas tentativas');
                    }
                }

                const data = await response.json();
                console.log('Stats data:', data);

                if (data.success) {
                    const totals = data.totals;
                    document.getElementById('totalSent').textContent = totals.total_sent || 0;
                    document.getElementById('totalReceived').textContent = totals.total_received || 0;
                    document.getElementById('totalCommands').textContent = totals.total_commands || 0;
                    document.getElementById('totalCnpj').textContent = totals.total_cnpj || 0;
                    document.getElementById('totalMessages').textContent = totals.total_messages || 0;
                    console.log('✅ Estatísticas carregadas com sucesso');
                } else {
                    console.error('❌ Erro ao carregar estatísticas:', data.message);
                    
                    // Se for erro de rate limiting, mostrar mensagem específica
                    if (data.message && data.message.includes('requisições')) {
                        showAlert('Muitas requisições. Os dados serão atualizados automaticamente em alguns segundos.', 'warning');
                        // Tentar novamente após 10 segundos
                        setTimeout(() => loadStats(), 10000);
                    }
                    
                    // Mostrar valores padrão em caso de erro
                    document.getElementById('totalSent').textContent = '-';
                    document.getElementById('totalReceived').textContent = '-';
                    document.getElementById('totalCommands').textContent = '-';
                    document.getElementById('totalCnpj').textContent = '-';
                    document.getElementById('totalMessages').textContent = '-';
                }
            } catch (error) {
                console.error('❌ Erro de conexão ao carregar estatísticas:', error);
                
                // Se for erro de rate limiting, tentar novamente
                if (error.message.includes('Rate limit') && retryCount < 3) {
                    console.log(`⏳ Tentando novamente em ${(retryCount + 1) * 5} segundos...`);
                    setTimeout(() => loadStats(retryCount + 1), (retryCount + 1) * 5000);
                    return;
                }
                
                // Mostrar valores de erro
                document.getElementById('totalSent').textContent = 'Erro';
                document.getElementById('totalReceived').textContent = 'Erro';
                document.getElementById('totalCommands').textContent = 'Erro';
                document.getElementById('totalCnpj').textContent = 'Erro';
                document.getElementById('totalMessages').textContent = 'Erro';
                
                showAlert('Erro ao carregar estatísticas. Tentando novamente...', 'error');
            }
        // Carregar estatísticas do Freshservice
        async function loadFreshserviceStats() {
            try {
                console.log('🔄 Carregando estatísticas do Freshservice...');
                console.log('Token disponível:', authToken ? 'Sim' : 'Não');

                const response = await fetch('/api/stats/freshservice', {
                    headers: { 'Authorization': `Bearer ${authToken}` }
                });

                console.log('📊 Resposta da API:', response.status, response.statusText);

                if (!response.ok) {
                    console.error('❌ Erro na resposta da API:', response.status);
                    document.getElementById('totalFreshserviceTickets').textContent = 'Erro API';
                    return;
                }

                const data = await response.json();
                console.log('📈 Dados recebidos:', data);

                if (data.success) {
                    const stats = data.data;
                    const ticketsCount = stats.total || 0;
                    document.getElementById('totalFreshserviceTickets').textContent = ticketsCount;
                    console.log('✅ Estatísticas atualizadas:', ticketsCount);
                } else {
                    console.error('❌ Erro nos dados da API:', data.error);
                    document.getElementById('totalFreshserviceTickets').textContent = 'Erro';
                }
            } catch (error) {
                console.error('❌ Erro ao carregar estatísticas do Freshservice:', error);
                document.getElementById('totalFreshserviceTickets').textContent = 'Erro';
            }
        }

        // Carregar health check com retry automático
        async function loadHealthCheck(retryCount = 0) {
            try {
                console.log('Carregando health check...');
                const response = await fetch('/api/bot/health', {
                    headers: { 'Authorization': `Bearer ${authToken}` }
                });
                
                // Se for rate limiting (429), tentar novamente após delay
                if (response.status === 429) {
                    if (retryCount < 2) {
                        console.log(`⏳ Rate limit no health check, tentando novamente em ${(retryCount + 1) * 3} segundos...`);
                        setTimeout(() => loadHealthCheck(retryCount + 1), (retryCount + 1) * 3000);
                        return;
                    }
                }
                
                const data = await response.json();
                const container = document.getElementById('healthStatus');

                if (data.success && data.healthy) {
                    container.innerHTML = `
                        <div style="text-align: center; color: #28a745;">
                            <i class="fas fa-check-circle" style="font-size: 2rem; margin-bottom: 1rem;"></i>
                            <p><strong>Sistema Saudável</strong></p>
                            <small>WhatsApp: ${data.data?.whatsapp ? 'Conectado' : 'Desconectado'}</small>
                        </div>
                    `;
                } else {
                    container.innerHTML = `
                        <div style="text-align: center; color: #dc3545;">
                            <i class="fas fa-exclamation-triangle" style="font-size: 2rem; margin-bottom: 1rem;"></i>
                            <p><strong>Sistema com Problemas</strong></p>
                            <small>${data.message || 'Bot não está respondendo'}</small>
                        </div>
                    `;
                }
                console.log('✅ Health check carregado');
            } catch (error) {
                console.error('❌ Erro ao carregar health check:', error);
                
                // Se for erro de rate limiting, tentar novamente
                if (error.message.includes('Rate limit') && retryCount < 2) {
                    setTimeout(() => loadHealthCheck(retryCount + 1), (retryCount + 1) * 3000);
                    return;
                }
                
                const container = document.getElementById('healthStatus');
                container.innerHTML = `
                    <div style="text-align: center; color: #dc3545;">
                        <i class="fas fa-times-circle" style="font-size: 2rem; margin-bottom: 1rem;"></i>
                        <p><strong>Erro de Conexão</strong></p>
                        <small>Não foi possível verificar o status</small>
                    </div>
                `;
            }
        }

        // Carregar logs
        async function loadLogs() {
            try {
                const response = await fetch('/api/bot/logs?lines=50', {
                    headers: { 'Authorization': `Bearer ${authToken}` }
                });
                const data = await response.json();

                const container = document.getElementById('logsContainer');

                if (data.success) {
                    container.innerHTML = '';
                    const logs = data.logs.split('\n').filter(line => line.trim());
                    logs.forEach(log => {
                        addLogEntry({ message: log });
                    });
                } else {
                    container.innerHTML = '<div class="log-entry log-error">Erro ao carregar logs</div>';
                }
            } catch (error) {
                console.error('Erro ao carregar logs:', error);
            }
        }

        // Adicionar entrada de log
        function addLogEntry(logData) {
            const container = document.getElementById('logsContainer');
            const entry = document.createElement('div');
            entry.className = 'log-entry';
            
            // Detectar tipo de log
            const message = logData.message || logData.details || '';
            if (message.toLowerCase().includes('error')) {
                entry.classList.add('log-error');
            } else if (message.toLowerCase().includes('warn')) {
                entry.classList.add('log-warn');
            } else if (message.toLowerCase().includes('info')) {
                entry.classList.add('log-info');
            }

            const timestamp = logData.timestamp ? new Date(logData.timestamp).toLocaleTimeString() : new Date().toLocaleTimeString();
            entry.innerHTML = `<span style="color: #888;">[${timestamp}]</span> ${message}`;
            
            container.appendChild(entry);
            container.scrollTop = container.scrollHeight;

            // Manter apenas os últimos 100 logs
            while (container.children.length > 100) {
                container.removeChild(container.firstChild);
            }
        }

        // Controles do bot
        async function startBot() {
            await controlBot('start', 'Iniciando sistema...');
        }

        async function stopBot() {
            await controlBot('stop', 'Parando bot...');
        }

        async function restartBot() {
            await controlBot('restart', 'Reiniciando bot...');
        }

        async function controlBot(action, message) {
            console.log(`🎮 Executando ação: ${action}`);
            
            // Desabilitar botões durante a operação
            const buttons = document.querySelectorAll('#startBtn, #restartBtn, #stopBtn');
            buttons.forEach(btn => {
                btn.disabled = true;
                btn.style.opacity = '0.6';
                btn.style.cursor = 'not-allowed';
            });
            
            showAlert(message, 'info');
            
            try {
                const response = await fetch(`/api/bot/${action}`, {
                    method: 'POST',
                    headers: { 
                        'Authorization': `Bearer ${authToken}`,
                        'Content-Type': 'application/json'
                    }
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                console.log(`📊 Resposta do ${action}:`, data);

                if (data.success) {
                    showAlert(data.message, 'success');
                    console.log(`✅ ${action} executado com sucesso`);
                    
                    // Aguardar o PM2 processar e atualizar status
                    setTimeout(() => {
                        loadBotStatus();
                        console.log('🔄 Status atualizado');
                    }, 2000);
                    
                    // Atualizar logs após ação
                    setTimeout(() => {
                        loadLogs();
                    }, 3000);
                } else {
                    let errorMsg = data.message || `Erro ao ${action} bot`;
                    
                    // Adicionar detalhes do erro se disponíveis
                    if (data.details) {
                        console.error('📋 Detalhes do erro:', data.details);
                        errorMsg += `\n\nDetalhes: ${data.details}`;
                    }
                    if (data.error) {
                        console.error('⚠️ Erro técnico:', data.error);
                        errorMsg += `\n\nErro: ${data.error}`;
                    }
                    
                    showAlert(errorMsg, 'danger');
                    console.error(`❌ Erro detalhado do ${action}:`, data);
                }
            } catch (error) {
                console.error(`❌ Erro ao ${action} bot:`, error);
                showAlert(`Erro de conexão ao ${action} bot: ${error.message}`, 'danger');
            } finally {
                // Reabilitar botões após um delay
                setTimeout(() => {
                    buttons.forEach(btn => {
                        btn.disabled = false;
                        btn.style.opacity = '1';
                        btn.style.cursor = 'pointer';
                    });
                    console.log('🔓 Botões reabilitados');
                }, 2000);
            }
        }

        // Atualizar logs
        function refreshLogs() {
            loadLogs();
        }

        // Função de debug para testar APIs
        async function testAPI() {
            console.log('=== DEBUG API ===');
            
            try {
                // Testar autenticação
                console.log('1. Testando autenticação...');
                const authResponse = await fetch('/api/auth/me', {
                    headers: { 'Authorization': `Bearer ${authToken}` }
                });
                const authData = await authResponse.json();
                console.log('Auth response:', authData);
                
                // Testar status do bot
                console.log('2. Testando status do bot...');
                const statusResponse = await fetch('/api/bot/status', {
                    headers: { 'Authorization': `Bearer ${authToken}` }
                });
                const statusData = await statusResponse.json();
                console.log('Status response:', statusData);
                
                // Testar debug do sistema
                console.log('3. Testando debug do sistema...');
                const debugResponse = await fetch('/api/bot/debug', {
                    headers: { 'Authorization': `Bearer ${authToken}` }
                });
                const debugData = await debugResponse.json();
                console.log('Debug response:', debugData);
                
                // Mostrar informações úteis
                if (debugData.success && debugData.debug) {
                    const debug = debugData.debug;
                    console.log('PM2 disponível:', debug.pm2_available);
                    console.log('Processos encontrados:', debug.processes.length);
                    debug.processes.forEach(p => {
                        console.log(`- ${p.name}: ${p.status} (PID: ${p.pid})`);
                    });
                }
                
                showAlert('Debug concluído. Verifique o console do navegador (F12)', 'info');
                
            } catch (error) {
                console.error('Erro no debug:', error);
                showAlert('Erro no debug. Verifique o console (F12)', 'danger');
            }
        }

        // Logout
        async function logout() {
            try {
                await fetch('/api/auth/logout', {
                    method: 'POST',
                    headers: { 'Authorization': `Bearer ${authToken}` }
                });
            } catch (error) {
                console.error('Erro no logout:', error);
            }

            localStorage.removeItem('authToken');
            localStorage.removeItem('user');
            window.location.href = '/';
        }

        // Limpar estatísticas
        async function clearStats() {
            if (!confirm('Tem certeza que deseja limpar todas as estatísticas? Esta ação não pode ser desfeita.')) {
                return;
            }
            
            try {
                const response = await fetch('/api/bot/stats', {
                    method: 'DELETE',
                    headers: { 'Authorization': `Bearer ${authToken}` }
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showAlert('Estatísticas limpas com sucesso!', 'success');
                    // Recarregar estatísticas
                    await loadStats();
                } else {
                    showAlert(data.message || 'Erro ao limpar estatísticas', 'danger');
                }
            } catch (error) {
                console.error('Erro ao limpar estatísticas:', error);
                showAlert('Erro ao limpar estatísticas', 'danger');
            }
        }

        // Utilitários
        function showAlert(message, type = 'info') {
            const alert = document.getElementById('alert');
            alert.className = `alert alert-${type}`;
            alert.textContent = message;
            alert.classList.remove('hidden');

            setTimeout(() => {
                alert.classList.add('hidden');
            }, 5000);
        }

        function formatMemory(bytes) {
            if (!bytes || bytes === 0) return 'N/A';
            const mb = bytes / (1024 * 1024);
            if (mb < 1024) {
                return `${mb.toFixed(1)} MB`;
            }
            const gb = mb / 1024;
            return `${gb.toFixed(2)} GB`;
        }

        function formatUptime(uptime) {
            if (!uptime) return 'N/A';
            const seconds = Math.floor((Date.now() - uptime) / 1000);
            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            return `${hours}h ${minutes}m`;
        }
    </script>
    
</body>
</html>
