/**
 * Comando de Atendimento
 * Cria ticket automaticamente no Freshservice quando usu√°rio solicita atendimento
 */

const logger = require('../config/logger');
const FreshserviceIntegration = require('../integrations/freshservice');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// Inicializar integra√ß√£o Freshservice
const freshservice = new FreshserviceIntegration({});

// Caminho do banco de dados
const DB_PATH = path.join(__dirname, '../../web-admin/database/admin.db');

// Armazenar contexto de usu√°rios aguardando descri√ß√£o do problema
const userContext = new Map();

/**
 * Registrar estat√≠sticas no banco de dados
 * @param {string} action - Tipo de a√ß√£o (ticket_created)
 * @param {Object} data - Dados da a√ß√£o
 */
async function recordStatistics(action, data = {}) {
    return new Promise((resolve, reject) => {
        const db = new sqlite3.Database(DB_PATH);

        if (action === 'ticket_created') {
            const today = new Date().toISOString().split('T')[0];

            // Verificar se j√° existe registro para hoje
            db.get("SELECT * FROM bot_stats WHERE date = ?", [today], (err, row) => {
                if (err) {
                    logger.error({ error: err.message }, 'Erro ao consultar estat√≠sticas');
                    db.close();
                    reject(err);
                    return;
                }

                if (row) {
                    // Atualizar registro existente
                    const freshserviceTickets = (row.freshservice_tickets || 0) + 1;
                    const totalMessages = (row.total_messages || 0) + 1;
                    const commandsExecuted = (row.commands_executed || 0) + 1;

                    db.run(
                        "UPDATE bot_stats SET freshservice_tickets = ?, total_messages = ?, commands_executed = ? WHERE date = ?",
                        [freshserviceTickets, totalMessages, commandsExecuted, today],
                        (err) => {
                            if (err) {
                                logger.error({ error: err.message }, 'Erro ao atualizar estat√≠sticas');
                                reject(err);
                            } else {
                                logger.info({ freshserviceTickets, date: today }, 'Estat√≠sticas de ticket atualizadas');
                                resolve();
                            }
                            db.close();
                        }
                    );
                } else {
                    // Criar novo registro para hoje
                    db.run(
                        "INSERT INTO bot_stats (date, freshservice_tickets, total_messages, commands_executed) VALUES (?, 1, 1, 1)",
                        [today],
                        (err) => {
                            if (err) {
                                logger.error({ error: err.message }, 'Erro ao inserir estat√≠sticas');
                                reject(err);
                            } else {
                                logger.info({ freshserviceTickets: 1, date: today }, 'Estat√≠sticas de ticket registradas');
                                resolve();
                            }
                            db.close();
                        }
                    );
                }
            });
        } else {
            db.close();
            resolve();
        }
    });
}

/**
 * Handler do comando !atendimento
 * @param {Object} message - Mensagem do WhatsApp
 * @param {Object} client - Cliente do WhatsApp
 * @returns {Promise<boolean>} - True se processou o comando
 */
async function handleAtendimentoCommand(message, client) {
    const body = (message.body || '').trim();
    const from = message.from;

    // Verificar se √© o comando !atendimento
    if (body.toLowerCase() === '!atendimento' || body.toLowerCase() === '!ticket') {
        if (!freshservice.isEnabled()) {
            // Modo simula√ß√£o - sem Freshservice configurado
            await message.reply(
                'üé´ *Sistema de Atendimento (Modo Simula√ß√£o)*\n\n' +
                '‚ö†Ô∏è O Freshservice n√£o est√° configurado ainda.\n\n' +
                'üìã *Para configurar:*\n' +
                '1. Obtenha sua API Key do Freshservice\n' +
                '2. Edite o arquivo .env\n' +
                '3. Adicione FRESHSERVICE_DOMAIN e FRESHSERVICE_API_KEY\n' +
                '4. Reinicie o bot\n\n' +
                'üìö *Documenta√ß√£o:*\n' +
                'Veja CONFIGURAR_FRESHSERVICE.md\n\n' +
                '_Por enquanto, voc√™ pode descrever seu problema e ele ser√° registrado localmente._'
            );

            // Solicitar descri√ß√£o mesmo sem Freshservice
            userContext.set(from, {
                waitingForDescription: true,
                timestamp: Date.now(),
                simulationMode: true
            });
            return true;
        }

        // Solicitar descri√ß√£o do problema
        await message.reply(
            'üé´ *Abertura de Chamado*\n\n' +
            'Por favor, descreva seu problema ou solicita√ß√£o em uma mensagem.\n\n' +
            '_Exemplo: Preciso de ajuda para configurar meu email_'
        );

        // Armazenar contexto do usu√°rio
        userContext.set(from, {
            waitingForDescription: true,
            timestamp: Date.now()
        });

        return true;
    }

    // Verificar se usu√°rio est√° no contexto de atendimento
    const context = userContext.get(from);
    if (context && context.waitingForDescription) {
        // Verificar timeout (5 minutos)
        if (Date.now() - context.timestamp > 300000) {
            userContext.delete(from);
            await message.reply(
                '‚è±Ô∏è *Tempo esgotado*\n\n' +
                'O tempo para descrever seu problema expirou.\n' +
                'Digite *!atendimento* novamente para abrir um novo chamado.'
            );
            return true;
        }

        // Usu√°rio enviou a descri√ß√£o do problema
        await createTicketFromMessage(message, client);
        userContext.delete(from);
        return true;
    }

    return false;
}

/**
 * Criar ticket no Freshservice a partir da mensagem
 * @param {Object} message - Mensagem do WhatsApp
 * @param {Object} client - Cliente do WhatsApp
 */
async function createTicketFromMessage(message, client) {
    try {
        // Obter informa√ß√µes do contato
        const contact = await message.getContact();
        const contactName = contact.pushname || contact.name || 'Usu√°rio WhatsApp';
        const phoneNumber = message.from.replace('@c.us', '');

        // Verificar se est√° em modo simula√ß√£o
        const context = userContext.get(message.from);
        if (context && context.simulationMode) {
            // Modo simula√ß√£o - sem Freshservice
            const ticketNumber = Math.floor(Math.random() * 9000) + 1000;
            
            await message.reply(
                '‚úÖ *Chamado registrado localmente!*\n\n' +
                `üìã *N√∫mero de Refer√™ncia:* #${ticketNumber}\n` +
                `üìù *Descri√ß√£o:* ${message.body}\n` +
                `üë§ *Contato:* ${contactName}\n` +
                `üìû *Telefone:* ${phoneNumber}\n\n` +
                '‚ö†Ô∏è *MODO SIMULA√á√ÉO*\n' +
                'Este chamado foi registrado apenas localmente.\n' +
                'Para criar tickets reais no Freshservice, configure:\n' +
                '‚Ä¢ FRESHSERVICE_DOMAIN\n' +
                '‚Ä¢ FRESHSERVICE_API_KEY\n\n' +
                'üìö Veja: CONFIGURAR_FRESHSERVICE.md'
            );

            logger.info({
                simulationMode: true,
                ticketNumber: ticketNumber,
                from: message.from,
                contact: contactName,
                description: message.body
            }, 'Ticket simulado criado');

            return;
        }

        // Modo real - com Freshservice configurado
        await message.reply('‚è≥ Criando seu chamado...');

        // Preparar dados para o Freshservice
        const whatsappData = {
            from: message.from,
            name: contactName,
            message: message.body,
            priority: 2, // M√©dia
            category: 'WhatsApp Support',
            customFields: {
                origem: 'WhatsApp Bot',
                numero_whatsapp: phoneNumber,
                data_solicitacao: new Date().toISOString()
            }
        };

        // Criar ticket
        const result = await freshservice.createTicketFromWhatsApp(whatsappData);

        if (result.success) {
            // Ticket criado com sucesso
            const responseMessage = 
                '‚úÖ *Chamado criado com sucesso!*\n\n' +
                `üìã *N√∫mero do Chamado:* #${result.ticketNumber}\n` +
                `üîó *Link:* ${result.ticketUrl}\n\n` +
                `üìù *Descri√ß√£o:* ${message.body}\n\n` +
                'üë®‚Äçüíº *Pr√≥ximos passos:*\n' +
                '‚Ä¢ Seu chamado foi direcionado para a fila de atendimento\n' +
                '‚Ä¢ Um analista entrar√° em contato em breve\n' +
                '‚Ä¢ Voc√™ receber√° atualiza√ß√µes por email\n\n' +
                `_Guarde o n√∫mero do chamado (#${result.ticketNumber}) para refer√™ncia futura._`;

            await message.reply(responseMessage);

            // Registrar estat√≠sticas
            await recordStatistics('ticket_created', {
                ticketId: result.ticketId,
                from: message.from,
                contact: contactName
            });

            logger.info({
                ticketId: result.ticketId,
                from: message.from,
                contact: contactName
            }, 'Ticket criado via WhatsApp');

        } else {
            // Erro ao criar ticket
            await message.reply(
                '‚ùå *Erro ao criar chamado*\n\n' +
                'N√£o foi poss√≠vel criar seu chamado no momento.\n' +
                `Erro: ${result.error}\n\n` +
                'Por favor, tente novamente mais tarde ou entre em contato diretamente com o suporte.'
            );

            logger.error({
                error: result.error,
                from: message.from
            }, 'Erro ao criar ticket via WhatsApp');
        }

    } catch (error) {
        logger.error({ error: error.message, from: message.from }, 'Erro ao processar atendimento');
        
        await message.reply(
            '‚ùå *Erro inesperado*\n\n' +
            'Ocorreu um erro ao processar sua solicita√ß√£o.\n' +
            'Por favor, tente novamente ou entre em contato diretamente com o suporte.'
        );
    }
}

/**
 * Limpar contextos antigos (executar periodicamente)
 */
function cleanupOldContexts() {
    const now = Date.now();
    const timeout = 300000; // 5 minutos

    for (const [key, context] of userContext.entries()) {
        if (now - context.timestamp > timeout) {
            userContext.delete(key);
        }
    }
}

// Limpar contextos antigos a cada minuto
setInterval(cleanupOldContexts, 60000);

module.exports = {
    handleAtendimentoCommand
};
